#@ load("defs.star", "ident", "name")
#@ namespace = "^/{}$".format(ident)

#@yaml/text-templated-strings
---
$schema: http://json-schema.org/draft-07/schema

$ref: '#module'

definitions:
  module:
    $id: '#module'
    type: object
    patternProperties:
      (@= name @):
        oneOf:
          - $ref: '#struct'
          - $ref: '#enum'
          - $ref: '#list'
          - $ref: '#array'
          - $ref: '#tuple'
          - $ref: '#map'
          - $ref: '#service'
      (@= namespace @):
        $ref: '#module'
      additionalProperties: false
  struct:
    $id: '#struct'
    properties:
      doc:
        type: string
      type:
        const: struct
      fields:
        type: array
        items:
          type: object
          properties:
            name:
              $ref: defs.json#/name
            type:
              $ref: defs.json#/type
          required: [name, type]
          additionalProperties: false
      required: [type, fields]
      additionalProperties: false
  enum:
    $id: '#enum'
    type: object
    properties:
      doc:
        type: string
      type:
        const: enum
      variants:
        oneOf:
          - type: array
            items:
              $ref: defs.json#/name
          - type: object
            patternProperties:
              (@= name @):
                oneOf:
                  - $ref: defs.json#/type
                  - const: '-'    #! when there is nothing associated with a variant
    required: [type, variants]
    additionalProperties: false
  list:
    $id: '#list'
    type: object
    properties:
      doc:
        type: string
      type:
        const: list
      items:
        $ref: defs.json#/type
    required: [type, items]
    additionalProperties: false
  array:
    $id: '#array'
    type: object
    properties:
      doc:
        type: string
      type:
        const: array
      items:
        $ref: defs.json#/type
      size:
        type: integer
        minimum: 0
    required: [type, items, size]
    additionalProperties: false
  tuple:
    $id: '#tuple'
    type: object
    properties:
      doc:
        type: string
      type:
        const: tuple
      items:
        $ref: defs.json#/type
    required: [type, items]
    additionalProperties: false
  map:
    $id: map
    type: object
    properties:
      doc:
        type: string
      type:
        const: tuple
      keys:
        $ref: defs.json#/primitive
      values:
        $ref: defs.json#/type'
      required: [type, keys, values]
  service:
    type: object
    properties:
      doc:
        type: string
      tags:
        $ref: defs.json#/tags
      extends:
        type: array
        items:
          $ref: defs.json#/ref
      methods:
        type: object
        patternProperties:
          (@= name @):
            type: object
            properties:
              accepts:
                (@= name @):
                  type: array
                  items:
                    - $ref: defs.json#/name
                    - $ref: defs.json#/type
              returns:
                $ref: defs.json#/type
              throws:
                $ref: defs.json#/type
              overloaded:
                $ref: defs.json#/name
            additionalProperties: false
      required: [methods]
      additionalProperties: false
