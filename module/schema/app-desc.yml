#@ load("defs.star", "ident", "name", "qname", "hash")
#@ namespace = "^/{id}(.{id})*$".format(id=ident)

#@yaml/text-templated-strings
---
$schema: http://json-schema.org/draft-07/schema

type: object
properties:
  modules:
    type: object
    patternProperties:
      (@= hash @):
        type: object
        properties:
          #! module name to be referred to elsewhere in this descriptor.
          #! 'host' is reserved to designate the foundry host.
          name:
            $ref: defs.json#/name
          init:
            #! the map corresponds to the parameters to the init method as if we used named parameter syntax
            $ref: defs.json#/mapValue
          tags:
            $ref: defs.json#/tags
        required:
          - name
        additionalProperties: false
    additionalProperties: false

  exports:
    type: object
    patternProperties:
      (@= name @):  #! module name
        $ref: '#exports'
    additionalProperties: false

  imports:
    type: object
    patternProperties:
      (@= name @):  #! module name
        $ref: '#imports'
    additionalProperties: false

  #! Wires module-supplying services into the host
  host:
    type: object
    properties:
      services:
        $ref: '#exports'
      bindings:
        $ref: '#imports'
      configs:   #! Configures the host
        $ref: '#configs'
    additionalProperties: false

  #! Lists Tx owners and services exported by them for Txes
  transactions:
    type: object
    patternProperties:
      (@= qname @):   #! tx type
        type: object
        properties:
          owner:
            $ref: defs.json#/name  #! module name
          services:
            type: array
            items:
              #! export IDs local to the owner module.
              #! If it's a namespace, all the exports under it are considered included.
              $ref: defs.json#/qname

    additionalProperties: false

  #! params section declares parameters to be used throughout the containing app desc file.
  #! Parameters may be set from external config files or command line arguments overriding
  #! default values if set in the params section.
  #!
  #! {name} may be specified where appropriate and is replaced with a value set
  #! for the corresponding parameter. Where strings are expected, {name}s may be
  #! specified as parts of the whole string values for interpolation of the parameter
  #! values into the resulting strings.
  #!
  #! The '{' and '}' are escaped by repeating them twice like '{{' and '}}'.
  params:
    $ref: '#params'

additionalProperties: false

definitions:
  exports:
    $id: '#exports'
    type: object
    patternProperties:
      (@= qname @):  #! export ID
        type: object
        patternProperties:
          (@= name @):  #! the name of a method in the constructor service for the module
            #! the map corresponds to the parameters to the init method as if we used named parameter syntax
            $ref: '#mapValue'
        minProperties: 1
        maxProperties: 1
        additionalProperties: false
      (@= namespace @):
        $ref: '#exports'
    additionalProperties: false

  imports:
    $id: '#imports'
    type: object
    patternProperties:
      (@= qname @):
        $ref: defs.json#/refs'
      (@= namespace @):
        $ref: '#imports'
    additionalProperties: false

  configs:
    $id: '#configs'
    type: object
    patternProperties:
      (@= qname @):
        $ref: 'defs.json#/simpleValue'
      (@= namespace @):
        $ref: '#configs'
    additionalProperties: false

  params:
    $id: '#params'
    type: object
    patternProperties:
      (@= name @):
        allOf:
          - type: object
            properties:
              doc:
                type: string
          - oneOf:
              - properties:
                  type:
                    const: string
                  default:
                    type: string
              - properties:
                  type:
                    const: int
                  default:
                    type: integer
                required: [type]
              - properties:
                  type:
                    const: bool
                  default:
                    type: boolean
                required: [type]
      (@= namespace @):
        $ref: '#params'
    additionalProperties: false
